name: C++ CI

on:
  push:
    branches:
      - docker-test

jobs:
  start-vm:
    name: Start VM
    runs-on: trampoline
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: b1gcvl619mdunf1cqqbv
          image-id: fd8ref8pd2uefi7o6kh3
          zone-id: 'ru-central1-b'
          subnet-id: e2lno1rkqo63l729dlo7
          cores: 16
          memory: 32GB
          core-fraction: 100
          disk-type: network-ssd-nonreplicated
          disk-size: 93GB

  checkout:
    name: Checkout sources
    needs: start-vm
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  check:
    name: Run checks
    needs:
      - start-vm
      - checkout
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Build Go
        shell: bash
        run: |
          cd yt/chyt/controller/cmd/chyt-controller
          export HOME=${RUNNER_WORKSPACE}
          /usr/local/go/bin/go build

      - name: Configure
        shell: bash
        run: |
          mkdir -p ../build
          cd ../build
          rm -rf *
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/clang.toolchain ../ytsaurus

      - name: Build
        shell: bash
        run: |
          cd ../build
          ninja

      - name: Build Py
        shell: bash
        run: |
          bash ./yt/docker/yt_nightly/build_py.sh --ytsaurus-source-path $(pwd) --ytsaurus-build-path ../build
 
      - name: Docker Hub login
        shell: bash
        run: |
          echo '${{ secrets.DOCKER_HUB_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_HUB_LOGIN}} --password-stdin

      - name: Get spyt
        uses: robinraju/release-downloader@v1.8
        with:
          latest: true
          fileName: "spyt-1.69.tar"

      - name: Get yql
        uses: robinraju/release-downloader@v1.8
        with:
          latest: true
          fileName: "yql-package.tar"

      - name: Docker ytsaurus
        shell: bash
        run: |
          tar -xf spyt-1.69.tar -C ../build
          tar -xf yql-package.tar -C ../build
          mkdir -p ../docker-ytsaurus-build
          bash ./yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd) --ytsaurus-build-path ../build --ytsaurus-spyt-release-path ../build/spyt_release --ytsaurus-yql-package-path ../build/yql_package --output-path ../docker-ytsaurus-build --image-tag unstable-0.0.3
          docker push ytsaurus/ytsaurus:unstable-0.0.3

      - name: Docker registry login
        shell: bash
        run: |
          echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > sa.json
          cat sa.json | docker login --username json_key --password-stdin  cr.yandex

      - name: Docker yt_nightly
        shell: bash
        run: |
          mkdir -p ../docker-yt_nightly-build
          bash ./yt/docker/yt_nightly/build.sh --ytsaurus-source-path $(pwd) --ytsaurus-build-path ../build --output-path ../docker-yt_nightly-build --registry cr.yandex/crpl84hkh3k16ihscv0j/ytsaurus-nightly --tag ${GITHUB_SHA}
          docker push cr.yandex/crpl84hkh3k16ihscv0j/ytsaurus-nightly:${GITHUB_SHA}

      - name: Kube
        shell: bash
        run: |
          export HOME=/root
          bash yt/docker/yt_nightly/kube.sh --ytsaurus-source-path $(pwd) --ytsaurus-docker ../docker-yt_nightly-build

      - name: Unittests
        shell: bash
        run: |
          cp ./yt/yt/scripts/run_unittests.sh ../build/
          cd ../build
          ./run_unittests.sh

  stop-vm:
    name: Stop VM
    needs:
      - start-vm
      - check
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-vm.outputs.label }}
          instance-id: ${{ needs.start-vm.outputs.instance-id }}

